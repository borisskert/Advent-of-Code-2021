module Day04Spec where

import Day04
import Test.Hspec

testInput = "7,4,9,5,11,17,23,2,0,14,21,24,10,16,13,6,15,25,12,22,18,20,8,19,3,26,1\n\n22 13 17 11  0\n 8  2 23  4 24\n21  9 14 16  7\n 6 10  3 18  5\n 1 12 20 15 19\n\n 3 15  0  2 22\n 9 18 13 17  5\n19  8  7 25 23\n20 11 10 24  4\n14 21 16 12  6\n\n14 21 17 24  4\n10 16 15  9 19\n18  8 23 26 20\n22 11 13  6  5\n 2  0 12  3  7"

spec :: Spec
spec = do
  it "parseInput" $ do
    parseInput testInput
      `shouldBe` ( [7, 4, 9, 5, 11, 17, 23, 2, 0, 14, 21, 24, 10, 16, 13, 6, 15, 25, 12, 22, 18, 20, 8, 19, 3, 26, 1],
                   [ Board ([[22, 13, 17, 11, 0], [8, 2, 23, 4, 24], [21, 9, 14, 16, 7], [6, 10, 3, 18, 5], [1, 12, 20, 15, 19]], []),
                     Board ([[3, 15, 0, 2, 22], [9, 18, 13, 17, 5], [19, 8, 7, 25, 23], [20, 11, 10, 24, 4], [14, 21, 16, 12, 6]], []),
                     Board ([[14, 21, 17, 24, 4], [10, 16, 15, 9, 19], [18, 8, 23, 26, 20], [22, 11, 13, 6, 5], [2, 0, 12, 3, 7]], [])
                   ]
                 )

  it "readBoardFrom" $ do
    readBoardFrom "22 13 17 11  0\n 8  2 23  4 24\n21  9 14 16  7\n 6 10  3 18  5\n 1 12 20 15 19" `shouldBe` (Board ([[22, 13, 17, 11, 0], [8, 2, 23, 4, 24], [21, 9, 14, 16, 7], [6, 10, 3, 18, 5], [1, 12, 20, 15, 19]], []))

  it "readBoardsFrom" $ do
    readBoardsFrom "22 13 17 11  0\n 8  2 23  4 24\n21  9 14 16  7\n 6 10  3 18  5\n 1 12 20 15 19\n\n 3 15  0  2 22\n 9 18 13 17  5\n19  8  7 25 23\n20 11 10 24  4\n14 21 16 12  6\n\n14 21 17 24  4\n10 16 15  9 19\n18  8 23 26 20\n22 11 13  6  5\n 2  0 12  3  7"
      `shouldBe` [ Board ([[22, 13, 17, 11, 0], [8, 2, 23, 4, 24], [21, 9, 14, 16, 7], [6, 10, 3, 18, 5], [1, 12, 20, 15, 19]], []),
                   Board ([[3, 15, 0, 2, 22], [9, 18, 13, 17, 5], [19, 8, 7, 25, 23], [20, 11, 10, 24, 4], [14, 21, 16, 12, 6]], []),
                   Board ([[14, 21, 17, 24, 4], [10, 16, 15, 9, 19], [18, 8, 23, 26, 20], [22, 11, 13, 6, 5], [2, 0, 12, 3, 7]], [])
                 ]

  it "addNumber" $ do
    addNumber (Board ([[14, 21, 17, 24, 4], [10, 16, 15, 9, 19], [18, 8, 23, 26, 20], [22, 11, 13, 6, 5], [2, 0, 12, 3, 7]], [])) 7 `shouldBe` (Board ([[14, 21, 17, 24, 4], [10, 16, 15, 9, 19], [18, 8, 23, 26, 20], [22, 11, 13, 6, 5], [2, 0, 12, 3, 7]], [7]))
    addNumber (Board ([[14, 21, 17, 24, 4], [10, 16, 15, 9, 19], [18, 8, 23, 26, 20], [22, 11, 13, 6, 5], [2, 0, 12, 3, 7]], [7])) 4 `shouldBe` (Board ([[14, 21, 17, 24, 4], [10, 16, 15, 9, 19], [18, 8, 23, 26, 20], [22, 11, 13, 6, 5], [2, 0, 12, 3, 7]], [7, 4]))
    addNumber (Board ([[14, 21, 17, 24, 4], [10, 16, 15, 9, 19], [18, 8, 23, 26, 20], [22, 11, 13, 6, 5], [2, 0, 12, 3, 7]], [7, 4])) 9 `shouldBe` (Board ([[14, 21, 17, 24, 4], [10, 16, 15, 9, 19], [18, 8, 23, 26, 20], [22, 11, 13, 6, 5], [2, 0, 12, 3, 7]], [7, 4, 9]))

  it "bingoHorizontal" $ do
    bingoHorizontal (Board ([[14, 21, 17, 24, 4], [10, 16, 15, 9, 19], [18, 8, 23, 26, 20], [22, 11, 13, 6, 5], [2, 0, 12, 3, 7]], [7, 4, 9, 5, 11, 17, 23, 2, 0, 14, 21, 24])) `shouldBe` Just [14, 21, 17, 24, 4]

  it "bingoVertical" $ do
    bingoVertical (Board ([[14, 21, 17, 24, 4], [10, 16, 15, 9, 19], [18, 8, 23, 26, 20], [22, 11, 13, 6, 5], [2, 0, 12, 3, 7]], [15, 18, 8, 11, 21])) `shouldBe` Nothing
    bingoVertical (Board ([[14, 21, 17, 24, 4], [10, 16, 15, 9, 19], [18, 8, 23, 26, 20], [22, 11, 13, 6, 5], [2, 0, 12, 3, 7]], [21, 16, 8, 11, 0])) `shouldBe` Just [21, 16, 8, 11, 0]

  it "bingo" $ do
    bingo (Board ([[14, 21, 17, 24, 4], [10, 16, 15, 9, 19], [18, 8, 23, 26, 20], [22, 11, 13, 6, 5], [2, 0, 12, 3, 7]], [7, 4, 9, 5, 11, 17, 23, 2, 0, 14, 21, 24])) `shouldBe` Just [14, 21, 17, 24, 4]
    bingo (Board ([[14, 21, 17, 24, 4], [10, 16, 15, 9, 19], [18, 8, 23, 26, 20], [22, 11, 13, 6, 5], [2, 0, 12, 3, 7]], [15, 18, 8, 11, 21])) `shouldBe` Nothing
    bingo (Board ([[14, 21, 17, 24, 4], [10, 16, 15, 9, 19], [18, 8, 23, 26, 20], [22, 11, 13, 6, 5], [2, 0, 12, 3, 7]], [21, 16, 8, 11, 0])) `shouldBe` Just [21, 16, 8, 11, 0]
    bingo (Board ([[14, 21, 17, 24, 4], [10, 16, 15, 9, 19], [18, 8, 23, 26, 20], [22, 11, 13, 6, 5], [2, 0, 12, 3, 7]], [14, 16, 23, 6, 7])) `shouldBe` Nothing
    bingo (Board ([[14, 21, 17, 24, 4], [10, 16, 15, 9, 19], [18, 8, 23, 26, 20], [22, 11, 13, 6, 5], [2, 0, 12, 3, 7]], [4, 9, 23, 11, 2])) `shouldBe` Nothing

  it "unmarked" $ do
    unmarked (Board ([[14, 21, 17, 24, 4], [10, 16, 15, 9, 19], [18, 8, 23, 26, 20], [22, 11, 13, 6, 5], [2, 0, 12, 3, 7]], [7, 4, 9, 5, 11, 17, 23, 2, 0, 14, 21, 24])) `shouldBe` [10, 16, 15, 19, 18, 8, 26, 20, 22, 13, 6, 12, 3]
    unmarked (Board ([[14, 21, 17, 24, 4], [10, 16, 15, 9, 19], [18, 8, 23, 26, 20], [22, 11, 13, 6, 5], [2, 0, 12, 3, 7]], [21, 16, 8, 11, 0])) `shouldBe` [14, 17, 24, 4, 10, 15, 9, 19, 18, 23, 26, 20, 22, 13, 6, 5, 2, 12, 3, 7]

  it "playSubmarineBingo" $ do
    playSubmarineBingo testInput `shouldBe` (188, 24)

main = hspec spec

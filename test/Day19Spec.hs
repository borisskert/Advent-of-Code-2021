module Day19Spec where

import Day19
import Test.Hspec
import Prelude hiding (subtract)

simpleTestInput = "--- scanner 0 ---\n0,2,5\n4,1,4\n3,3,2\n\n--- scanner 1 ---\n-1,-1,-3\n-5,0,1\n-2,1,7\n"

testInput = "--- scanner 0 ---\n404,-588,-901\n528,-643,409\n-838,591,734\n390,-675,-793\n-537,-823,-458\n-485,-357,347\n-345,-311,381\n-661,-816,-575\n-876,649,763\n-618,-824,-621\n553,345,-567\n474,580,667\n-447,-329,318\n-584,868,-557\n544,-627,-890\n564,392,-477\n455,729,728\n-892,524,684\n-689,845,-530\n423,-701,434\n7,-33,-71\n630,319,-379\n443,580,662\n-789,900,-551\n459,-707,401\n\n--- scanner 1 ---\n686,422,578\n605,423,415\n515,917,-361\n-336,658,858\n95,138,22\n-476,619,847\n-340,-569,-846\n567,-361,727\n-460,603,-452\n669,-402,600\n729,430,532\n-500,-761,534\n-322,571,750\n-466,-666,-811\n-429,-592,574\n-355,545,-477\n703,-491,-529\n-328,-685,520\n413,935,-424\n-391,539,-444\n586,-435,557\n-364,-763,-893\n807,-499,-711\n755,-354,-619\n553,889,-390\n\n--- scanner 2 ---\n649,640,665\n682,-795,504\n-784,533,-524\n-644,584,-595\n-588,-843,648\n-30,6,44\n-674,560,763\n500,723,-460\n609,671,-379\n-555,-800,653\n-675,-892,-343\n697,-426,-610\n578,704,681\n493,664,-388\n-671,-858,530\n-667,343,800\n571,-461,-707\n-138,-166,112\n-889,563,-600\n646,-828,498\n640,759,510\n-630,509,768\n-681,-892,-333\n673,-379,-804\n-742,-814,-386\n577,-820,562\n\n--- scanner 3 ---\n-589,542,597\n605,-692,669\n-500,565,-823\n-660,373,557\n-458,-679,-417\n-488,449,543\n-626,468,-788\n338,-750,-386\n528,-832,-391\n562,-778,733\n-938,-730,414\n543,643,-506\n-524,371,-870\n407,773,750\n-104,29,83\n378,-903,-323\n-778,-728,485\n426,699,580\n-438,-605,-362\n-469,-447,-387\n509,732,623\n647,635,-688\n-868,-804,481\n614,-800,639\n595,780,-596\n\n--- scanner 4 ---\n727,592,562\n-293,-554,779\n441,611,-461\n-714,465,-776\n-743,427,-804\n-660,-479,-426\n832,-632,460\n927,-485,-438\n408,393,-506\n466,436,-512\n110,16,151\n-258,-428,682\n-393,719,612\n-211,-452,876\n808,-476,-593\n-575,615,604\n-485,667,467\n-680,325,-822\n-627,-443,-432\n872,-547,-609\n833,512,582\n807,604,487\n839,-516,451\n891,-625,532\n-652,-548,-490\n30,-46,-14"

testScanInput =
  [ [[404, -588, -901], [528, -643, 409], [-838, 591, 734], [390, -675, -793], [-537, -823, -458], [-485, -357, 347], [-345, -311, 381], [-661, -816, -575], [-876, 649, 763], [-618, -824, -621], [553, 345, -567], [474, 580, 667], [-447, -329, 318], [-584, 868, -557], [544, -627, -890], [564, 392, -477], [455, 729, 728], [-892, 524, 684], [-689, 845, -530], [423, -701, 434], [7, -33, -71], [630, 319, -379], [443, 580, 662], [-789, 900, -551], [459, -707, 401]],
    [[686, 422, 578], [605, 423, 415], [515, 917, -361], [-336, 658, 858], [95, 138, 22], [-476, 619, 847], [-340, -569, -846], [567, -361, 727], [-460, 603, -452], [669, -402, 600], [729, 430, 532], [-500, -761, 534], [-322, 571, 750], [-466, -666, -811], [-429, -592, 574], [-355, 545, -477], [703, -491, -529], [-328, -685, 520], [413, 935, -424], [-391, 539, -444], [586, -435, 557], [-364, -763, -893], [807, -499, -711], [755, -354, -619], [553, 889, -390]],
    [[649, 640, 665], [682, -795, 504], [-784, 533, -524], [-644, 584, -595], [-588, -843, 648], [-30, 6, 44], [-674, 560, 763], [500, 723, -460], [609, 671, -379], [-555, -800, 653], [-675, -892, -343], [697, -426, -610], [578, 704, 681], [493, 664, -388], [-671, -858, 530], [-667, 343, 800], [571, -461, -707], [-138, -166, 112], [-889, 563, -600], [646, -828, 498], [640, 759, 510], [-630, 509, 768], [-681, -892, -333], [673, -379, -804], [-742, -814, -386], [577, -820, 562]],
    [[-589, 542, 597], [605, -692, 669], [-500, 565, -823], [-660, 373, 557], [-458, -679, -417], [-488, 449, 543], [-626, 468, -788], [338, -750, -386], [528, -832, -391], [562, -778, 733], [-938, -730, 414], [543, 643, -506], [-524, 371, -870], [407, 773, 750], [-104, 29, 83], [378, -903, -323], [-778, -728, 485], [426, 699, 580], [-438, -605, -362], [-469, -447, -387], [509, 732, 623], [647, 635, -688], [-868, -804, 481], [614, -800, 639], [595, 780, -596]],
    [[727, 592, 562], [-293, -554, 779], [441, 611, -461], [-714, 465, -776], [-743, 427, -804], [-660, -479, -426], [832, -632, 460], [927, -485, -438], [408, 393, -506], [466, 436, -512], [110, 16, 151], [-258, -428, 682], [-393, 719, 612], [-211, -452, 876], [808, -476, -593], [-575, 615, 604], [-485, 667, 467], [-680, 325, -822], [-627, -443, -432], [872, -547, -609], [833, 512, 582], [807, 604, 487], [839, -516, 451], [891, -625, 532], [-652, -548, -490], [30, -46, -14]]
  ]

testScan0 = ((0, 0, 0), [], [(404, -588, -901), (528, -643, 409), (-838, 591, 734), (390, -675, -793), (-537, -823, -458), (-485, -357, 347), (-345, -311, 381), (-661, -816, -575), (-876, 649, 763), (-618, -824, -621), (553, 345, -567), (474, 580, 667), (-447, -329, 318), (-584, 868, -557), (544, -627, -890), (564, 392, -477), (455, 729, 728), (-892, 524, 684), (-689, 845, -530), (423, -701, 434), (7, -33, -71), (630, 319, -379), (443, 580, 662), (-789, 900, -551), (459, -707, 401)])

testScan1 = ((0, 0, 0), [], [(686, 422, 578), (605, 423, 415), (515, 917, -361), (-336, 658, 858), (95, 138, 22), (-476, 619, 847), (-340, -569, -846), (567, -361, 727), (-460, 603, -452), (669, -402, 600), (729, 430, 532), (-500, -761, 534), (-322, 571, 750), (-466, -666, -811), (-429, -592, 574), (-355, 545, -477), (703, -491, -529), (-328, -685, 520), (413, 935, -424), (-391, 539, -444), (586, -435, 557), (-364, -763, -893), (807, -499, -711), (755, -354, -619), (553, 889, -390)])

testScan4 = ((0, 0, 0), [], [(727, 592, 562), (-293, -554, 779), (441, 611, -461), (-714, 465, -776), (-743, 427, -804), (-660, -479, -426), (832, -632, 460), (927, -485, -438), (408, 393, -506), (466, 436, -512), (110, 16, 151), (-258, -428, 682), (-393, 719, 612), (-211, -452, 876), (808, -476, -593), (-575, 615, 604), (-485, 667, 467), (-680, 325, -822), (-627, -443, -432), (872, -547, -609), (833, 512, 582), (807, 604, 487), (839, -516, 451), (891, -625, 532), (-652, -548, -490), (30, -46, -14)])

relativeTestScan1 = ((68, -1246, -43), [], [(-618, -824, -621), (-537, -823, -458), (-447, -329, 318), (404, -588, -901), (-27, -1108, -65), (544, -627, -890), (408, -1815, 803), (-499, -1607, -770), (528, -643, 409), (-601, -1648, -643), (-661, -816, -575), (568, -2007, -577), (390, -675, -793), (534, -1912, 768), (497, -1838, -617), (423, -701, 434), (-635, -1737, 486), (396, -1931, -563), (-345, -311, 381), (459, -707, 401), (-518, -1681, -600), (432, -2009, 850), (-739, -1745, 668), (-687, -1600, 576), (-485, -357, 347)])

relativeTestScan4 = ((-20, -1133, 1061), [], [(-612, -1695, 1788), (534, -1912, 768), (-631, -672, 1502), (-485, -357, 347), (-447, -329, 318), (459, -707, 401), (612, -1593, 1893), (465, -695, 1988), (-413, -627, 1469), (-456, -621, 1527), (-36, -1284, 1171), (408, -1815, 803), (-739, -1745, 668), (432, -2009, 850), (456, -540, 1869), (-635, -1737, 486), (-687, -1600, 576), (-345, -311, 381), (423, -701, 434), (527, -524, 1933), (-532, -1715, 1894), (-624, -1620, 1868), (496, -1584, 1900), (605, -1665, 1952), (528, -643, 409), (26, -1119, 1091)])

testScans =
  [ testScan0,
    testScan1,
    ((0, 0, 0), [], [(649, 640, 665), (682, -795, 504), (-784, 533, -524), (-644, 584, -595), (-588, -843, 648), (-30, 6, 44), (-674, 560, 763), (500, 723, -460), (609, 671, -379), (-555, -800, 653), (-675, -892, -343), (697, -426, -610), (578, 704, 681), (493, 664, -388), (-671, -858, 530), (-667, 343, 800), (571, -461, -707), (-138, -166, 112), (-889, 563, -600), (646, -828, 498), (640, 759, 510), (-630, 509, 768), (-681, -892, -333), (673, -379, -804), (-742, -814, -386), (577, -820, 562)]),
    ((0, 0, 0), [], [(-589, 542, 597), (605, -692, 669), (-500, 565, -823), (-660, 373, 557), (-458, -679, -417), (-488, 449, 543), (-626, 468, -788), (338, -750, -386), (528, -832, -391), (562, -778, 733), (-938, -730, 414), (543, 643, -506), (-524, 371, -870), (407, 773, 750), (-104, 29, 83), (378, -903, -323), (-778, -728, 485), (426, 699, 580), (-438, -605, -362), (-469, -447, -387), (509, 732, 623), (647, 635, -688), (-868, -804, 481), (614, -800, 639), (595, 780, -596)]),
    testScan4
  ]

spec :: Spec
spec = do
  it "parseInput" $ do
    parseInput simpleTestInput
      `shouldBe` [ [[0, 2, 5], [4, 1, 4], [3, 3, 2]],
                   [[-1, -1, -3], [-5, 0, 1], [-2, 1, 7]]
                 ]
    parseInput testInput `shouldBe` testScanInput

  it "toVector" $ do
    toVector [0, 2, 5] `shouldBe` (0, 2, 5)
    toVector [4, 1, 4] `shouldBe` (4, 1, 4)
    toVector [3, 3, 2] `shouldBe` (3, 3, 2)

  it "toVectors" $ do
    toVectors [[0, 2, 5], [4, 1, 4], [3, 3, 2]] `shouldBe` [(0, 2, 5), (4, 1, 4), (3, 3, 2)]

  it "toScans" $ do
    toScans testScanInput `shouldBe` testScans

  it "rotateX" $ do
    rotateX (1, 0, 0) `shouldBe` (1, 0, 0)
    rotateX (0, 1, 0) `shouldBe` (0, 0, 1)
    rotateX (0, 0, 1) `shouldBe` (0, -1, 0)
    rotateX (1, 1, 0) `shouldBe` (1, 0, 1)
    rotateX (0, 1, 1) `shouldBe` (0, -1, 1)
    rotateX (1, 1, 1) `shouldBe` (1, -1, 1)

  it "rotateY" $ do
    rotateY (1, 0, 0) `shouldBe` (0, 0, -1)
    rotateY (0, 1, 0) `shouldBe` (0, 1, 0)
    rotateY (0, 0, 1) `shouldBe` (1, 0, 0)
    rotateY (1, 1, 0) `shouldBe` (0, 1, -1)
    rotateY (0, 1, 1) `shouldBe` (1, 1, 0)
    rotateY (1, 1, 1) `shouldBe` (1, 1, -1)

  it "rotateZ" $ do
    rotateZ (1, 0, 0) `shouldBe` (0, 1, 0)
    rotateZ (0, 1, 0) `shouldBe` (-1, 0, 0)
    rotateZ (0, 0, 1) `shouldBe` (0, 0, 1)
    rotateZ (1, 1, 0) `shouldBe` (-1, 1, 0)
    rotateZ (0, 1, 1) `shouldBe` (-1, 0, 1)
    rotateZ (1, 1, 1) `shouldBe` (-1, 1, 1)

  -- it "rotationsX" $ do
  --   rotationsX [(0, 2, 5), (4, 1, 4), (3, 3, 2)] `shouldBe` [[(0, 2, 5), (4, 1, 4), (3, 3, 2)], [(0, -5, 2), (4, -4, 1), (3, -2, 3)], [(0, -2, -5), (4, -1, -4), (3, -3, -2)], [(0, 5, -2), (4, 4, -1), (3, 2, -3)]]

  -- it "rotationsY" $ do
  --   rotationsY [(0, 2, 5), (4, 1, 4), (3, 3, 2)] `shouldBe` [[(0, 2, 5), (4, 1, 4), (3, 3, 2)], [(5, 2, 0), (4, 1, -4), (2, 3, -3)], [(0, 2, -5), (-4, 1, -4), (-3, 3, -2)], [(-5, 2, 0), (-4, 1, 4), (-2, 3, 3)]]

  -- it "rotationsZ" $ do
  --   rotationsZ [(0, 2, 5), (4, 1, 4), (3, 3, 2)] `shouldBe` [[(0, 2, 5), (4, 1, 4), (3, 3, 2)], [(-2, 0, 5), (-1, 4, 4), (-3, 3, 2)], [(0, -2, 5), (-4, -1, 4), (-3, -3, 2)], [(2, 0, 5), (1, -4, 4), (3, -3, 2)]]

  -- it "relativeToScanner" $ do
  --   relativeToScanner ((68, -1246, -43), ((-1, 0, 0), (0, 1, 1), (0, 0, 0)), [(-618, -1668, -621), (-537, -1669, -458), (-447, -2163, 318), (404, -1904, -901), (-27, -1384, -65), (544, -1865, -890), (408, -677, 803), (-499, -885, -770), (528, -1849, 409), (-601, -844, -643), (-661, -1676, -575), (568, -485, -577), (390, -1817, -793), (534, -580, 768), (497, -654, -617), (423, -1791, 434), (-635, -755, 486), (396, -561, -563), (-345, -2181, 381), (459, -1785, 401), (-518, -811, -600), (432, -483, 850), (-739, -747, 668), (-687, -892, 576), (-485, -2135, 347)])
  --     `shouldBe` ((0, 0, 0), ((-1, 0, 0), (0, 1, 1), (0, 0, 0)), [(686, 422, 578), (605, 423, 415), (515, 917, -361), (-336, 658, 858), (95, 138, 22), (-476, 619, 847), (-340, -569, -846), (567, -361, 727), (-460, 603, -452), (669, -402, 600), (729, 430, 532), (-500, -761, 534), (-322, 571, 750), (-466, -666, -811), (-429, -592, 574), (-355, 545, -477), (703, -491, -529), (-328, -685, 520), (413, 935, -424), (-391, 539, -444), (586, -435, 557), (-364, -763, -893), (807, -499, -711), (755, -354, -619), (553, 889, -390)])
  --   relativeToScanner ((-20, -1359, 1061), ((0, 1, 1), (0, 0, 0), (-1, 0, 0)), [(-747, -1951, 499), (273, -805, 282), (-461, -1970, 1522), (694, -1824, 1837), (723, -1786, 1865), (640, -880, 1487), (-852, -727, 601), (-947, -874, 1499), (-428, -1752, 1567), (-486, -1795, 1573), (-130, -1375, 910), (238, -931, 379), (373, -2078, 449), (191, -907, 185), (-828, -883, 1654), (555, -1974, 457), (465, -2026, 594), (660, -1684, 1883), (607, -916, 1493), (-892, -812, 1670), (-853, -1871, 479), (-827, -1963, 574), (-859, -843, 610), (-911, -734, 529), (632, -811, 1551), (-50, -1313, 1075)])
  --     `shouldBe` ((0, 0, 0), ((-1, 0, 0), (0, 1, 1), (0, 0, 0)), [(686, 422, 578), (605, 423, 415), (515, 917, -361), (-336, 658, 858), (95, 138, 22), (-476, 619, 847), (-340, -569, -846), (567, -361, 727), (-460, 603, -452), (669, -402, 600), (729, 430, 532), (-500, -761, 534), (-322, 571, 750), (-466, -666, -811), (-429, -592, 574), (-355, 545, -477), (703, -491, -529), (-328, -685, 520), (413, 935, -424), (-391, 539, -444), (586, -435, 557), (-364, -763, -893), (807, -499, -711), (755, -354, -619), (553, 889, -390)])

  it "findOverlapping" $ do
    findOverlapping testScan0 testScan1
      `shouldBe` Just (((-544, 627, 890), [], [(140, -39, 11), (16, 16, -1299), (1382, -1218, -1624), (154, 48, -97), (1081, 196, -432), (1029, -270, -1237), (889, -316, -1271), (1205, 189, -315), (1420, -1276, -1653), (1162, 197, -269), (-9, -972, -323), (70, -1207, -1557), (991, -298, -1208), (1128, -1495, -333), (0, 0, 0), (-20, -1019, -413), (89, -1356, -1618), (1436, -1151, -1574), (1233, -1472, -360), (121, 74, -1324), (537, -594, -819), (-86, -946, -511), (101, -1207, -1552), (1333, -1527, -339), (85, 80, -1291)]), ((-476, -619, 847), [((0, 0, 1), (0, 1, 0), (-1, 0, 0)), ((0, 0, 1), (0, 1, 0), (-1, 0, 0))], [(1162, 197, -269), (1081, 196, -432), (991, -298, -1208), (140, -39, 11), (571, 481, -825), (0, 0, 0), (136, 1188, -1693), (1043, 980, -120), (16, 16, -1299), (1145, 1021, -247), (1205, 189, -315), (-24, 1380, -313), (154, 48, -97), (10, 1285, -1658), (47, 1211, -273), (121, 74, -1324), (1179, 1110, -1376), (148, 1304, -327), (889, -316, -1271), (85, 80, -1291), (1062, 1054, -290), (112, 1382, -1740), (1283, 1118, -1558), (1231, 973, -1466), (1029, -270, -1237)]))

  it "relativeScannerPositions" $ do
    relativeScannerPositions testScan0 testScan1 `shouldBe` Just relativeTestScan1
    relativeScannerPositions relativeTestScan1 testScan4 `shouldBe` Just relativeTestScan4
    relativeScannerPositions testScan0 testScan4 `shouldBe` Nothing

  it "howManyBeacons" $ do
    howManyBeacons testInput `shouldBe` 79

main = hspec spec
